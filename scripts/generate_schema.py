"""Generate Schema Script."""
import argparse
import logging
import logging.config
from pathlib import Path

import black
from strictyaml import Map, Optional, Seq, Validator

from src.board.board import Board
from src.items.item import Item
from src.parsers.board_digits_parser import BoardDigitsParser
from src.parsers.parser import Parser
from src.parsers.size_parser import SizeParser
from src.parsers.solution_parser import SolutionParser
from src.utils.config import Config
from src.utils.load_modules import load_modules
from src.utils.names import Name

config: Config = Config()
logging.config.dictConfig(config.logging)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('generate_schema')
logging.getLogger('blib2to3').setLevel(logging.WARNING)


def create_config_schema() -> Map:
    """Create a configuration schema for the problem.

    Returns:
        Map: A strictyaml Map object representing the schema.
    """
    class_name: str
    constraint: Item
    constraints: dict[Optional, Validator | Optional] = {}
    for class_name, constraint in Item.classes.items():
        if class_name == 'Solution':
            continue
        constraints[Optional(class_name)] = constraint.schema()

    return Map(
        {
            'Board': Board.schema(),
            'Constraints': Map(constraints),
            Optional('Solution'): Seq(SolutionParser()),
        },
    )


def write_config_schema(file_path: Path, schema: Map, import_names: set[str]) -> None:
    """Write the generated configuration schema to a file.

    Args:
        file_path (Path): The path to the output file.
        schema (Map): The generated strictyaml schema.
        import_names (set[str]): A set of import names required in the schema file.
    """
    with file_path.open('w', encoding='utf-8') as schema_file:
        name: str
        schema_file.write('"""ConfigSchema. Autogenerated."""\n')
        schema_file.write('from strictyaml import Map, Optional, Seq, Str\n\n')
        for name in sorted(import_names):
            schema_file.write(f'from src.parsers.{Name.camel_to_snake(name)} import {name}\n')
        map_string: str = repr(schema).replace('"', "'")
        schema_file.write(f'problem_schema = {map_string}\n')


def format_python_file(file_path: Path) -> None:
    """Format a Python file using Black.

    Args:
        file_path (Path): The path to the Python file to be formatted.

    Raises:
        ValueError: If the file does not exist.
        FileNotFoundError: If Black is not installed.
    """
    if not file_path.is_file():
        raise ValueError(f'The file does not exist: {file_path}')
    try:
        # Format the file using the black module
        black.format_file_in_place(
            file_path.resolve(),
            fast=False,
            mode=black.FileMode(),
            write_back=black.WriteBack.YES,
        )
        logging.info(f'File {file_path} formatted successfully.')
    except Exception as exp:
        logging.error(f'Error formatting the file: {exp}')


def replace_quotes_in_file(file_path: Path) -> None:
    """Replace double quotes with single quotes in a Python file.

    Args:
        file_path (Path): The path to the Python file.
    """
    python_code: str = file_path.read_text(encoding='utf-8')
    python_code = python_code.replace('"', "'")
    python_code = python_code.replace("'''", '"""')
    file_path.write_text(python_code, encoding='utf-8')


def create_arg_parser() -> argparse.ArgumentParser:
    """Create an argument parser for the script.

    Returns:
        argparse.ArgumentParser: The argument parser object.
    """
    parser: argparse.ArgumentParser = argparse.ArgumentParser(description='Generate config schema file.')
    parser.add_argument('output', type=Path, help='The output path for the generated config schema file')
    return parser


def get_import_names() -> set[str]:
    """Retrieve the set of parser import names required for the schema.

    Returns:
        set[str]: A set of parser class names.
    """
    import_names: set[str] = {'SolutionParser'}
    import_names.add(SizeParser.__name__)
    import_names.add(BoardDigitsParser.__name__)
    class_name: str
    constraint: Item
    for class_name, constraint in Item.classes.items():
        if class_name == 'Solution':
            continue
        parser: Parser = constraint.parser()
        import_names.add(parser.__class__.__name__)
    return import_names


if __name__ == '__main__':
    logging.info('Generating config schema...')
    arg_parser: argparse.ArgumentParser = create_arg_parser()
    args: argparse.Namespace = arg_parser.parse_args()
    load_modules('src.items')
    mapping: Map = create_config_schema()
    names: set[str] = get_import_names()
    write_config_schema(args.output, mapping, names)
    format_python_file(args.output)
    replace_quotes_in_file(args.output)
    logging.info('Config schema generation completed.')
