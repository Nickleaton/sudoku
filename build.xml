<?xml version="1.0"?>
<project name="Sudoku" default="info">
    <target name="info">
        <echo>Hello World - Sudoku!</echo>
    </target>
    <target name="build" depends="install,update,pylint,mypy">
        <echo>Build</echo>
    </target>
    <target name="install">
        <exec executable="poetry" failonerror="true"
              taskname="poetry">
            <arg value="install"/>
        </exec>
    </target>
    <target name="update">
        <exec executable="poetry" failonerror="true"
              taskname="poetry">
            <arg value="update"/>
        </exec>
    </target>

    <target name="perflint">
        <exec executable="perflint" failonerror="true">
            <arg value="src"/>
            <arg value="--disable"/>
            <arg value="loop-global-usage,loop-invariant-statement"/>
            <arg value="--output"/>
            <arg value="output/perflint.html"/>
        </exec>
    </target>


    <target name="pytest" depends="pytest-src,pytest-acceptance">
        <echo>Pytest</echo>
    </target>


    <target name="pytest-acceptance">
        <mkdir dir="output/tests"/>
        <mkdir dir="output/lp"/>
        <mkdir dir="output/svg"/>
        <exec executable="pytest" failonerror="false" taskname="pytest">
            <arg value="tests/acceptance/run_acceptance_tests.py"/>
            <arg value="--rootdir=src"/>
            <arg value="--html=output/tests/acceptance.html"/>
        </exec>
    </target>

    <target name="pytest-src" depends="pytest-commands,pytest-glyphs,pytest-items,pytest-solver,pytest-utils">
        <echo>Pytest src</echo>
    </target>

    <target name="pytest-commands">
        <mkdir dir="output/tests"/>
        <mkdir dir="output/lp"/>
        <mkdir dir="output/svg"/>
        <exec executable="pytest" failonerror="false" taskname="pytest">
            <arg value="tests/commands"/>
            <arg value="--rootdir=src"/>
            <arg value="--html=output/tests/commands.html"/>
        </exec>
    </target>

    <target name="pytest-glyphs">
        <mkdir dir="output/tests"/>
        <mkdir dir="output/lp"/>
        <mkdir dir="output/svg"/>
        <exec executable="pytest" failonerror="false" taskname="pytest">
            <arg value="tests/glyphs"/>
            <arg value="--rootdir=src"/>
            <arg value="--html=output/tests/glyphs.html"/>
        </exec>
    </target>

    <target name="pytest-items">
        <mkdir dir="output/tests"/>
        <mkdir dir="output/lp"/>
        <mkdir dir="output/svg"/>
        <exec executable="pytest" failonerror="false" taskname="pytest">
            <arg value="tests/items"/>
            <arg value="--rootdir=src"/>
            <arg value="--html=output/tests/items.html"/>
        </exec>
    </target>

    <target name="pytest-solver">
        <mkdir dir="output/tests"/>
        <mkdir dir="output/lp"/>
        <mkdir dir="output/svg"/>
        <exec executable="pytest" failonerror="false" taskname="pytest">
            <arg value="tests/solver"/>
            <arg value="--rootdir=src"/>
            <arg value="--html=output/tests/solver.html"/>
        </exec>
    </target>


    <target name="pytest-utils">
        <mkdir dir="output/tests"/>
        <mkdir dir="output/lp"/>
        <mkdir dir="output/svg"/>
        <exec executable="pytest" failonerror="false" taskname="pytest">
            <arg value="--cov=src"/>
            <arg value="tests"/>
            <arg value="--rootdir=src"/>
            <arg value="--html=output/tests/utils.html"/>
            <arg value="--cov-report=html"/>
        </exec>
    </target>

    <target name="pylint" depends="pylint.src,pylint.tests"/>

    <target name="pylint.src">
        <exec executable="pylint">
            <arg value="--disable=loop-invariant-statement,loop-invariant-statement,unused-argument,broad-exception-raised,too-many-positional-arguments,fixme"/>
            <arg value="--max-args=10"/>
            <arg value="src"/>
        </exec>
    </target>

    <target name="pylint.tests">
        <exec executable="pylint">
            <arg value="tests"/>
        </exec>
    </target>

    <target name="mypy">
        <mkdir dir="output/mypy"/>
        <exec executable="mypy" failonerror="false" taskname="mypy">
            <arg value="--namespace-packages"/>
            <arg value="--html-report"/>
            <arg value="output/mypy"/>
            <arg value="src"/>
        </exec>
    </target>

    <target name="doc.src">
        <exec executable="pdoc" failonerror="false" taskname="pdoc">
            <arg value="--docformat"/>
            <arg value="google"/>
            <arg value="--include-undocumented"/>
            <arg value="--math"/>
            <arg value="--search"/>
            <arg value="--mermaid"/>
            <arg value="--output-dir"/>
            <arg value="output/docs"/>
            <arg value="src"/>
        </exec>
    </target>


    <target name="convert-json-to-yaml">
        <mkdir dir="problems/fpuzzles/yaml"/>
        <exec executable="python.exe" failonerror="true" taskname="convert-json-to-yaml">
            <arg value="scripts/convert.py"/>
            <arg value="--source"/>
            <arg value="problems/fpuzzles/goodjson"/>
            <arg value="--destination"/>
            <arg value="problems/fpuzzles/yaml"/>
        </exec>
        <copy todir="problems/easy" overwrite="true">
            <fileset dir="problems/fpuzzles/yaml">
                <include name="**/*.yaml"/>
            </fileset>
        </copy>
    </target>
    <target name="convert-test">
        <mkdir dir="problems/fpuzzles/test"/>
        <exec executable="python.exe" failonerror="true" taskname="convert-json-to-yaml">
            <arg value="scripts/convert.py"/>
            <arg value="--source"/>
            <arg value="problems/fpuzzles/goodjson/yjryhuka.json"/>
            <arg value="--destination"/>
            <arg value="C:\Users\nickl\AppData\Roaming\JetBrains\PyCharm2022.3\scratches"/>
        </exec>
    </target>

    <target name="radon">
        <mkdir dir="output/radon"/>
        <exec executable="radon.exe" failonerror="true" output="output/radon/cc.txt">
            <arg value="cc"/>
            <arg value="src"/>
        </exec>
        <exec executable="radon.exe" failonerror="true" output="output/radon/mi.txt">
            <arg value="mi"/>
            <arg value="src"/>
        </exec>
    </target>

    <target name="bandit.src">
        <mkdir dir="output/bandit"/>
        <exec executable="bandit" failonerror="false" taskname="bandit" output="output/bandit/src.txt">
            <arg value="-r"/>
            <arg value="src/"/>
        </exec>
    </target>

    <target name="bandit.tests">
        <mkdir dir="output/bandit"/>
        <exec executable="bandit" failonerror="false" taskname="bandit" output="output/bandit/tests.txt">
            <arg value="-r"/>
            <arg value="tests/"/>
        </exec>
    </target>

    <target name="vulture">
        <mkdir dir="output/vulture"/>
        <exec executable="vulture" failonerror="false" taskname="vulture" output="output/vulture/vulture.txt">
            <arg value="src/"/>
            <arg value="tests/"/>
        </exec>
    </target>

    <!-- Macro definition for running pydocstyle on a specified name -->
    <macrodef name="run-pydocstyle">
        <attribute name="name"/>
        <sequential>
            <!-- Execute pydocstyle and store the result in a property -->
            <exec executable="pydocstyle"
                  failonerror="false"
                  taskname="pydocstyle"
                  output="output/pydocstyle/@{name}.txt"
                  resultproperty="pydocstyle.@{name}.result">
                <arg value="src/@{name}/"/>
            </exec>

            <!-- Set a status property to "pass" or "fail" based on the result -->
            <condition property="pydocstyle.@{name}.status" value="fail">
                <not>
                    <equals arg1="${pydocstyle.@{name}.result}" arg2="0"/>
                </not>
            </condition>
            <condition property="pydocstyle.@{name}.status" value="pass">
                <equals arg1="${pydocstyle.@{name}.result}" arg2="0"/>
            </condition>

            <!-- Echo the status message for this directory -->
            <echo message="pydocstyle ${pydocstyle.@{name}.status}: '@{name}'"/>
        </sequential>
    </macrodef>

    <target name="pydocstyle">
        <mkdir dir="output/pydocstyle"/>
        <run-pydocstyle name="commands"/>
        <run-pydocstyle name="glyphs"/>
        <run-pydocstyle name="items"/>
        <run-pydocstyle name="parsers"/>
        <run-pydocstyle name="solvers"/>
        <run-pydocstyle name="tokens"/>
        <run-pydocstyle name="utils"/>
    </target>

    <target name="ruff.src">
        <mkdir dir="output/ruff"/>
        <exec executable="ruff" failonerror="false" taskname="ruff" output="output/ruff/src.txt">
            <arg value="check"/>
            <arg value="src/"/>
        </exec>
    </target>

    <target name="ruff.tests">
        <mkdir dir="output/ruff"/>
        <exec executable="ruff" failonerror="false" taskname="ruff" output="output/ruff/tests.txt">
            <arg value="check"/>
            <arg value="tests/items"/>
        </exec>
    </target>

    <target name="flake8.src">
        <mkdir dir="output/flake8"/>
        <exec executable="flake8" failonerror="false" taskname="flake8" output="output/flake8/src.txt">
            <arg value="--max-line-length"/>
            <arg value="120"/>
            <arg value="src/"/>
        </exec>
    </target>

    <target name="flake8.tests">
        <mkdir dir="output/flake8"/>
        <exec executable="flake8" failonerror="false" taskname="flake8" output="output/flake8/tests.txt">
            <arg value="--max-line-length"/>
            <arg value="120"/>
            <arg value="src/"/>
        </exec>
    </target>

    <target name="pydocstyle.tests">
        <mkdir dir="output/pydocstyle"/>
        <exec executable="pydocstyle" failonerror="false" taskname="pydocstyle" output="output/pydocstyle/tests.txt">
            <arg value="--ignore"/>
            <arg value="D100,D101,D102,D105,D107"/>
            <arg value="tests/"/>
        </exec>
    </target>

</project>