<?xml version="1.0"?>
<project name="Sudoku" default="info">


    <property name="generate.schema" location="scripts/generate_config_schema.py"/>
    <property name="generate.command.pydot" location="scripts/generate_command_pydot.py"/>
    <property name="schema" value="src/schema/config_schema.py"/>
    <property name="uml.dir" value="documentation/uml"/>


    <target name="build" depends="install,update,pylint,mypy,ruff,flake8.src,flake8.tests">
        <echo>Build</echo>
    </target>
    <target name="install">
        <exec executable="poetry" failonerror="true"
              taskname="poetry">
            <arg value="install"/>
        </exec>
    </target>
    <target name="update">
        <exec executable="poetry" failonerror="true"
              taskname="poetry">
            <arg value="update"/>
        </exec>
    </target>

    <target name="perflint.src">
        <mkdir dir="output/perflint"/>
        <exec executable="perflint" failonerror="true">
            <arg value="src"/>
            <arg value="--disable"/>
            <arg value="loop-global-usage,loop-invariant-statement"/>
            <arg value="--output"/>
            <arg value="output/perflint/src.html"/>
        </exec>
    </target>

    <target name="pytest">
        <mkdir dir="output/tests"/>
        <exec executable="python" failonerror="false" taskname="pytest-unit-tests">
            <!--            <env key="PYTHONPATH" path="${basedir}/src"/>-->
            <arg value="-m"/>
            <arg value="pytest"/>
            <arg value="tests/"/>
            <arg value="--html=output/tests/tests.html"/>
            <arg value="--cov=src"/>
            <arg value="--cov-report=html:output/coverage/html"/>
        </exec>
    </target>


    <target name="pylint">
        <exec executable="pylint">
            <arg line="src tests"/>
            <arg value="--disable=C0103,W8201,R0914,R0917,R0913,R0902,R0903,R0902"/>
        </exec>
    </target>

    <target name="mypy">
        <mkdir dir="output/mypy"/>
        <exec executable="mypy" failonerror="false" taskname="mypy">
            <arg value="--namespace-packages"/>
            <arg value="--html-report"/>
            <arg value="output/mypy"/>
            <arg value="src"/>
            <arg value="scripts"/>
        </exec>
    </target>

    <target name="doc.src">
        <exec executable="pdoc" failonerror="false" taskname="pdoc">
            <arg value="--docformat"/>
            <arg value="google"/>
            <arg value="--include-undocumented"/>
            <arg value="--math"/>
            <arg value="--search"/>
            <arg value="--mermaid"/>
            <arg value="--output-dir"/>
            <arg value="output/docs"/>
            <arg value="src"/>
        </exec>
    </target>

    <target name="convert-json-to-yaml">
        <mkdir dir="problems/fpuzzles/yaml"/>
        <exec executable="python.exe" failonerror="true" taskname="convert-json-to-yaml">
            <arg value="scripts/convert.py"/>
            <arg value="--source"/>
            <arg value="problems/fpuzzles/goodjson"/>
            <arg value="--destination"/>
            <arg value="problems/fpuzzles/yaml"/>
        </exec>
        <copy todir="problems/easy" overwrite="true">
            <fileset dir="problems/fpuzzles/yaml">
                <include name="**/*.yaml"/>
            </fileset>
        </copy>
    </target>

    <target name="convert-test">
        <mkdir dir="problems/fpuzzles/test"/>
        <exec executable="python.exe" failonerror="true" taskname="convert-json-to-yaml">
            <arg value="scripts/convert.py"/>
            <arg value="--source"/>
            <arg value="problems/fpuzzles/goodjson/yjryhuka.json"/>
            <arg value="--destination"/>
            <arg value="C:\Users\nickl\AppData\Roaming\JetBrains\PyCharm2022.3\scratches"/>
        </exec>
    </target>

    <target name="static.code.analysis"
            depends="vulture, pydocstyle, radon, bandit, pylint, mypy, ruff"/>

    <target name="radon">
        <mkdir dir="output/radon"/>
        <exec executable="radon.exe" failonerror="true" output="output/radon/cc.txt">
            <arg value="cc"/>
            <arg value="src"/>
            <arg value="-nc"/>
        </exec>
        <exec executable="radon.exe" failonerror="true" output="output/radon/mi.txt">
            <arg value="mi"/>
            <arg value="src"/>
            <arg value="-nc"/>
        </exec>
    </target>

    <target name="bandit" depends="bandit.src,bandit.tests"/>

    <target name="bandit.src">
        <mkdir dir="output/bandit"/>
        <exec executable="bandit" failonerror="false" taskname="bandit" output="output/bandit/src.txt">
            <arg value="-r"/>
            <arg value="src/"/>
        </exec>
    </target>

    <target name="bandit.tests">
        <mkdir dir="output/bandit"/>
        <exec executable="bandit" failonerror="false" taskname="bandit" output="output/bandit/tests.txt">
            <arg value="-r"/>
            <arg value="tests/"/>
        </exec>
    </target>

    <target name="vulture">
        <mkdir dir="output/vulture"/>
        <exec executable="vulture" failonerror="false" taskname="vulture" output="output/vulture/vulture.txt">
            <arg value="src/"/>
            <arg value="tests/"/>
        </exec>
    </target>

    <target name="pydocstyle" depends="pydocstyle.src,pydocstyle.tests"/>

    <target name="pydocstyle.src">
        <mkdir dir="output/pydocstyle"/>
        <exec executable="pydocstyle" failonerror="false" taskname="pydocstyle" output="output/pydocstyle/src.txt">
            <arg value="src"/>
        </exec>
    </target>

    <target name="pydocstyle.tests">
        <mkdir dir="output/pydocstyle"/>
        <exec executable="pydocstyle" failonerror="false" taskname="pydocstyle" output="output/pydocstyle/tests.txt">
            <arg value="tests"/>
        </exec>
    </target>


    <target name="ruff" depends="ruff.src,ruff.scripts,ruff.tests"/>

    <target name="ruff.src">
        <mkdir dir="output/ruff"/>
        <exec executable="ruff" failonerror="false" taskname="ruff" output="output/ruff/src.txt">
            <arg value="check"/>
            <arg value="src/"/>
            <arg value="--no-cache"/>
        </exec>
    </target>

    <target name="ruff.scripts">
        <mkdir dir="output/ruff"/>
        <exec executable="ruff" failonerror="false" taskname="ruff" output="output/ruff/scripts.txt">
            <arg value="check"/>
            <arg value="src/"/>
            <arg value="--no-cache"/>
        </exec>
    </target>

    <target name="ruff.tests">
        <mkdir dir="output/ruff"/>
        <exec executable="ruff" failonerror="false" taskname="ruff" output="output/ruff/tests.txt">
            <arg value="check"/>
            <arg value="tests/items"/>
            <arg value="--no-cache"/>
        </exec>
    </target>

    <!-- Define a macro for running flake8 -->
    <macrodef name="run-flake8">
        <attribute name="module"/>
        <sequential>
            <mkdir dir="output/flake8/@{module}"/>
            <exec executable="flake8" failonerror="false" taskname="flake8">
                <arg value="--format=html"/>
                <arg value="--htmldir=output/flake8/@{module}"/>
                <arg value="@{module}"/>
            </exec>
        </sequential>
    </macrodef>

    <target name="flake8.src">
        <run-flake8 module="src"/>
    </target>

    <target name="flake8.scripts">
        <run-flake8 module="scripts"/>
    </target>

    <target name="flake8.tests">
        <run-flake8 module="tests"/>
    </target>

    <target name="generate.schema">
        <exec executable="python" failonerror="true">
            <env key="PYTHONPATH" value="${basedir}"/>
            <arg value="${generate.schema}"/>
            <arg value="${schema}"/>
        </exec>
    </target>

    <target name="generate_command_pydot">
        <exec executable="python" failonerror="true">
            <env key="PYTHONPATH" value="${basedir}"/>
            <arg value="${generate.command.pydot}"/>
            <arg value="${basedir}/output/commands"/>
        </exec>
    </target>


    <target name="generate-documentation">
        <exec executable="python" failonerror="true">
            <env key="PYTHONPATH" value="${basedir}"/>
            <arg value="scripts/generate_documentation.py"/>
            <arg value="--target"/>
            <arg value="gendocs"/>
        </exec>
    </target>


    <target name="uml" depends="uml-constraints, uml-cell"/>

    <target name="uml-constraints">
        <mkdir dir="${uml.dir}"/>
        <exec executable="pyreverse" failonerror="true">
            <arg value="--output"/>
            <arg value="png"/>
            <arg value="--output-directory"/>
            <arg value="${uml.dir}"/>
            <arg value="--project"/>
            <arg value="Constraints"/>
            <arg value="--only-classnames"/>
            <arg value="src/items/item.py"/>
            <arg value="src/items/composed_item.py"/>
            <arg value="src/items/constraints.py"/>
            <arg value="src/items/disjoint_groups.py"/>
            <arg value="src/items/columns.py"/>
            <arg value="src/items/boxes.py"/>
            <arg value="src/items/rows.py"/>
            <arg value="src/items/disjoint_group.py"/>
            <arg value="src/items/column.py"/>
            <arg value="src/items/box.py"/>
            <arg value="src/items/row.py"/>
            <arg value="src/items/known.py"/>
            <arg value="src/items/region.py"/>
            <arg value="src/items/region_set.py"/>
            <arg value="src/items/special_region.py"/>
            <arg value="src/items/standard_region.py"/>
            <arg value="src/items/standard_region_set.py"/>
            <arg value="src/items/unique_region.py"/>
            <arg value="src/items/solution.py"/>
            <arg value="src/items/solution.py"/>
            <arg value="src/items/known.py"/>
        </exec>
    </target>

    <target name="uml-cell">
        <mkdir dir="${uml.dir}"/>
        <exec executable="pyreverse" failonerror="true">
            <arg value="--output"/>
            <arg value="png"/>
            <arg value="--output-directory"/>
            <arg value="${uml.dir}"/>
            <arg value="--project"/>
            <arg value="Cell"/>
            <arg value="--only-classnames"/>
            <arg value="src/items/item.py"/>
            <arg value="src/items/cell_reference.py"/>
            <arg value="src/items/simple_cell_reference.py"/>
            <arg value="src/items/fortress_cell.py"/>
            <arg value="src/items/fortress_greater_than_cell.py"/>
            <arg value="src/items/fortress_less_than_cell.py"/>
            <arg value="src/items/parity_cell.py"/>
            <arg value="src/items/even_cell.py"/>
            <arg value="src/items/odd_cell.py"/>
            <arg value="src/items/entropic_cell.py"/>
            <arg value="src/items/low_cell.py"/>
            <arg value="src/items/mid_cell.py"/>
            <arg value="src/items/high_cell.py"/>
            <arg value="src/items/known_cell.py"/>
        </exec>
    </target>

</project>
