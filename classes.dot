digraph "classes" {
rankdir=BT
charset="utf-8"
"src.utils.angle.Angle" [color="black", fontcolor="black", label="{Angle|angle\lopposite\ltransform\l|}", shape="record", style="solid"];
"src.utils.angle.AngleException" [color="black", fontcolor="red", label="{AngleException|\l|}", shape="record", style="solid"];
"src.solvers.answer.Answer" [color="black", fontcolor="black", label="{Answer|board\ldata : List[List[int]]\l|create(board: Board, yaml: Dict): 'Answer'\lextract(_: Board, yaml: Dict): List[str]\lget_value(row: int, column: int): int\lset_value(row: int, column: int, value: int): None\lstandard_string(): str\l}", shape="record", style="solid"];
"src.commands.answer_command.AnswerCommand" [color="black", fontcolor="black", label="{AnswerCommand|output : str\l|process(): None\lselector(item: Item): bool\l}", shape="record", style="solid"];
"src.items.anti.Anti" [color="black", fontcolor="black", label="{Anti|digits : List[int]\ltags\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\loffsets(): List[Coord]\lpairs(c1: Cell, digits: List[int]): Sequence[DifferentPair]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.anti_bltr.AntiBLTR" [color="black", fontcolor="black", label="{AntiBLTR|\l|glyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.anti_diagonal.AntiDiagonal" [color="black", fontcolor="black", label="{AntiDiagonal|count\lrules\lsize\ltags\l|add_constraint(solver: PulpSolver): None\l}", shape="record", style="solid"];
"src.items.anti_king.AntiKing" [color="black", fontcolor="black", label="{AntiKing|rules\ltags\l|create(board: Board, yaml: Dict): Item\loffsets(): List[Coord]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.anti_knight.AntiKnight" [color="black", fontcolor="black", label="{AntiKnight|rules\ltags\l|create(board: Board, yaml: Dict): Item\loffsets(): List[Coord]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.anti_monkey.AntiMonkey" [color="black", fontcolor="black", label="{AntiMonkey|rules\ltags\l|create(board: Board, yaml: Dict): Item\loffsets(): List[Coord]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.anti_queen.AntiQueen" [color="black", fontcolor="black", label="{AntiQueen|digits : List[int]\lrules\ltags\l|offsets(): List[Coord]\l}", shape="record", style="solid"];
"src.items.anti_tlbr.AntiTLBR" [color="black", fontcolor="black", label="{AntiTLBR|\l|glyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.arrow.Arrow" [color="black", fontcolor="black", label="{Arrow|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.ArrowGlyph" [color="black", fontcolor="black", label="{ArrowGlyph|angle\larrow : str\lposition\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.glyphs.glyph.ArrowLineGlyph" [color="black", fontcolor="black", label="{ArrowLineGlyph|\l|end_marker(): Optional[Marker]\lstart_marker(): Optional[Marker]\l}", shape="record", style="solid"];
"src.items.asterix.Asterix" [color="black", fontcolor="black", label="{Asterix|\l|coords(): List[Coord]\lcss(): Dict\lregion_name(): str\l}", shape="record", style="solid"];
"src.items.bltr.BLTR" [color="black", fontcolor="black", label="{BLTR|\l|add_constraint(solver: PulpSolver): None\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.battenburg.Battenburg" [color="black", fontcolor="black", label="{Battenburg|position\lrules\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.BattenburgGlyph" [color="black", fontcolor="black", label="{BattenburgGlyph|coord\l|draw(): Optional[BaseElement]\lsymbol(): Optional[Marker]\l}", shape="record", style="solid"];
"src.items.between.Between" [color="black", fontcolor="black", label="{Between|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.BetweenGlyph" [color="black", fontcolor="black", label="{BetweenGlyph|\l|end_marker(): Optional[Marker]\lstart_marker(): Optional[Marker]\l}", shape="record", style="solid"];
"src.items.board.Board" [color="black", fontcolor="black", label="{Board|author : Optional[str]\lboard_columns : int\lboard_rows : int\lbox_columns : int\lbox_count : int\lbox_range : NoneType, list\lbox_rows : int\lcolumn_range : list\ldigit_range : list\ldigit_sum\ldigit_values\lmaximum_digit\lminimum_digit : int\lreference : Optional[str]\lrow_range : list\ltitle : Optional[str]\lvideo : Optional[str]\l|box_index(row: int, column: int): int\lcreate(name: str, yaml_data: Dict): 'Board'\lis_valid(row: int, column: int): bool\lis_valid_coordinate(coord: Coord): bool\lparse_xy(s: str): Tuple[int, int]\lto_dict()\lto_yaml(): str\l}", shape="record", style="solid"];
"src.items.book_keeping.BookKeeping" [color="black", fontcolor="black", label="{BookKeeping|digit_range : range\lmaximum_digit : int\lpossibles\l|fixed(): bool\lis_possible(digit: int): bool\lset_even(): None\lset_impossible(digits: List[int]): None\lset_maximum(upper: int): None\lset_minimum(lower: int): None\lset_odd(): None\lset_possible(digits: List[int]): None\lset_range(lower: int, upper: int): None\l}", shape="record", style="solid"];
"src.commands.bookkeeping_png_command.BookkeepingPNGCommand" [color="black", fontcolor="black", label="{BookkeepingPNGCommand|svg\ltempfilename : str\l|process(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.utils.bound.Bounds" [color="black", fontcolor="black", label="{Bounds|name\l|}", shape="record", style="solid"];
"src.items.box.Box" [color="black", fontcolor="black", label="{Box|position\lrules\lsize\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lstart(): Coord\l}", shape="record", style="solid"];
"src.glyphs.glyph.BoxGlyph" [color="black", fontcolor="black", label="{BoxGlyph|\l|}", shape="record", style="solid"];
"src.items.boxes.Boxes" [color="black", fontcolor="black", label="{Boxes|\l|create(board: Board, yaml: Dict): Item\l}", shape="record", style="solid"];
"src.items.cell.Cell" [color="black", fontcolor="black", label="{Cell|book\lcache : Dict[Tuple[int, int], 'Cell']\lcolumn : int\lcoord\lrow : int\lrow_column\lrow_column_string\lrules\lvalid\l|add_bookkeeping_contraint(solver: PulpSolver): None\ladd_constraint(solver: PulpSolver): None\lcells(): List['Cell']\lclear()\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Coord\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lletter(): str\lmake(board: Board, row: int, column: int): 'Cell'\lmake_board(board: Board)\lparity(solver): lpSum\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.cell.CellException" [color="black", fontcolor="red", label="{CellException|\l|}", shape="record", style="solid"];
"src.glyphs.glyph.CellGlyph" [color="black", fontcolor="black", label="{CellGlyph|priority\l|}", shape="record", style="solid"];
"src.items.cell_reference.CellReference" [color="black", fontcolor="black", label="{CellReference|cell\lcolumn : int\lrow : int\lrules\lused_classes\l|children(): Set[Item]\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Tuple\lflatten(): List[Item]\lletter(): str\lsvg(): Optional[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.center_product.CenterProduct" [color="black", fontcolor="black", label="{CenterProduct|rules\l|css(): Dict\lget_cells(): List[Cell]\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.CircleGlyph" [color="black", fontcolor="black", label="{CircleGlyph|center\lpercentage : float\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.column.Column" [color="black", fontcolor="black", label="{Column|rules\lstrict : bool\ltags\lunique : bool\l|add_constraint(solver: PulpSolver): None\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.column_indexer.ColumnIndexer" [color="black", fontcolor="black", label="{ColumnIndexer|\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lother_variant(): str\lvariant(): str\l}", shape="record", style="solid"];
"src.items.columns.Columns" [color="black", fontcolor="black", label="{Columns|\l|create(board: Board, yaml: Dict): Item\l}", shape="record", style="solid"];
"src.commands.command.Command" [color="black", fontcolor="black", label="{Command|output_filename : Optional[str]\lparent : Optional[Command]\l|check_directory(): None\lprocess(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.commands.composed_command.ComposedCommand" [color="black", fontcolor="black", label="{ComposedCommand|items : List[Command]\l|add(item: Command)\ladd_items(items: Sequence[Command])\lprocess(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.glyphs.glyph.ComposedGlyph" [color="black", fontcolor="black", label="{ComposedGlyph|items : NoneType, list\lused_classes\l|add(item: Glyph)\ldraw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.composed_item.ComposedItem" [color="black", fontcolor="black", label="{ComposedItem|cells\litems : List[Item]\lrules\ltags\lused_classes\l|add(item: Item)\ladd_constraint(solver: PulpSolver): None\ladd_items(items: Sequence[Item])\lbookkeeping(): None\lchildren(): Set[Item]\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lflatten(): List['Item']\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lregions(): Set['Item']\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.utils.config.Config" [color="black", fontcolor="black", label="{Config|ARROW_HEAD_PERCENTAGE : float\lCELL_SIZE : int\lCONSECUTIVE_RADIUS : int\lEVEN_CELL_SIZE : int\lKILLER_OFFSET : int\lKROPKI_RADIUS : int\lODD_CELL_RADIUS : int\lTHERMO_HEAD_PERCENTAGE : float\l|}", shape="record", style="solid"];
"src.glyphs.glyph.Consecutive1Glyph" [color="black", fontcolor="black", label="{Consecutive1Glyph|\l|}", shape="record", style="solid"];
"src.glyphs.glyph.ConsecutiveGlyph" [color="black", fontcolor="black", label="{ConsecutiveGlyph|first\lpriority\lsecond\l|}", shape="record", style="solid"];
"src.items.consecutive_pair.ConsecutivePair" [color="black", fontcolor="black", label="{ConsecutivePair|rules\ltags\l|create(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Tuple\lglyphs(selector): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.constraint_exception.ConstraintException" [color="black", fontcolor="red", label="{ConstraintException|\l|}", shape="record", style="solid"];
"src.items.constraints.Constraints" [color="black", fontcolor="black", label="{Constraints|used_classes\l|create(board: Board, yaml: Dict): Item\l}", shape="record", style="solid"];
"src.utils.coord.Coord" [color="black", fontcolor="black", label="{Coord|bottom_left\lbottom_right\lcenter\lcolumn : float\lpoint\lrow : float\ltop_left\ltop_right\ltransform\l|create_from_int(row_column: int): 'Coord'\lmiddle(a: 'Coord', b: 'Coord'): 'Coord'\lvalidate(yaml): List[str]\l}", shape="record", style="solid"];
"src.utils.coord.CoordException" [color="black", fontcolor="red", label="{CoordException|\l|}", shape="record", style="solid"];
"src.utils.coord_list.CoordList" [color="black", fontcolor="black", label="{CoordList|items : List[Coord]\ln : int\l|add(item: Coord): None\lsort(): None\l}", shape="record", style="solid"];
"src.utils.coord_list.CoordListException" [color="black", fontcolor="red", label="{CoordListException|\l|}", shape="record", style="solid"];
"src.utils.cyclic.Cyclic" [color="black", fontcolor="black", label="{Cyclic|name\l|create(letter: str): 'Cyclic'\l}", shape="record", style="solid"];
"src.items.diagonals.Diagonal" [color="black", fontcolor="black", label="{Diagonal|\l|create(board: Board, yaml: Dict): Item\lcss(): Dict\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.difference_line.DifferenceLine" [color="black", fontcolor="black", label="{DifferenceLine|difference : int\lexcluded : List[int]\ltags\l|}", shape="record", style="solid"];
"src.items.difference_pair.DifferencePair" [color="black", fontcolor="black", label="{DifferencePair|difference : int\lrules\ltags\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Tuple\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.different_pair.DifferentPair" [color="black", fontcolor="black", label="{DifferentPair|digits : List[int]\lrules\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Tuple\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.utils.direction.Direction" [color="black", fontcolor="black", label="{Direction|angle\llocation\lname\loffset\l|all(): List[Coord]\ldiagonals(): List[Coord]\ldirection(location: int): 'Direction'\lkings(): List[Coord]\llocations(): List[int]\lorthogonals(): List[Coord]\lparallel(other: 'Direction'): bool\l}", shape="record", style="solid"];
"src.utils.direction.DirectionException" [color="black", fontcolor="red", label="{DirectionException|\l|}", shape="record", style="solid"];
"src.items.disjoint_group.DisjointGroup" [color="black", fontcolor="black", label="{DisjointGroup|offsets : list\lrules\lstrict : bool\ltags\lunique : bool\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): int\l}", shape="record", style="solid"];
"src.items.disjoint_groups.DisjointGroups" [color="black", fontcolor="black", label="{DisjointGroups|\l|create(board: Board, yaml: Dict): Item\l}", shape="record", style="solid"];
"src.items.distinct_renban.DistinctRenban" [color="black", fontcolor="black", label="{DistinctRenban|rules\ltags\l|css(): Dict\ldigits_to_str(digits: List[int])\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lpower(digit: int)\lpower_str(power: int)\l}", shape="record", style="solid"];
"src.items.dutch_whisper.DutchWhisper" [color="black", fontcolor="black", label="{DutchWhisper|tags\l|css(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.EdgeTextGlyph" [color="black", fontcolor="black", label="{EdgeTextGlyph|first\lpriority\lsecond\l|}", shape="record", style="solid"];
"src.items.entropic.Entropic" [color="black", fontcolor="black", label="{Entropic|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\llow_total(solver: PulpSolver, n: int): LpAffineExpression\lmid_total(solver: PulpSolver, n: int): LpAffineExpression\ltop_total(solver: PulpSolver, n: int): LpAffineExpression\l}", shape="record", style="solid"];
"src.items.equal_sum.EqualSum" [color="black", fontcolor="black", label="{EqualSum|rules\ltags\l|add_constraint(solver: PulpSolver): None\lbookkeeping(): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.even_cell.EvenCell" [color="black", fontcolor="black", label="{EvenCell|rules\ltags\l|bookkeeping(): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lincluded(digit: int): bool\lletter(): str\lsvg(): Optional[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.EvenCellGlyph" [color="black", fontcolor="black", label="{EvenCellGlyph|percentage : float\lposition\lsize\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.exclusion.Exclusion" [color="black", fontcolor="black", label="{Exclusion|digits : str\lnumbers : str\lposition\lrules\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.first_n.FirstN" [color="black", fontcolor="black", label="{FirstN|coords : list\lindex : int\loffset\lreference\lside\ltags\l|count(): int\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.solvers.formulations.Formulations" [color="black", fontcolor="black", label="{Formulations|count : int\l|abs(model: LpProblem, x1: LpVariable, x2: LpVariable, upper: int): LpVariable\ldisjunction(model: LpProblem, var: LpElement, lower_1: int, upper_1: int, lower_2: int, upper_2: int): None\llogical_and(model: LpProblem, dis: List[LpVariable]): LpVariable\llogical_not(model: LpProblem, di: LpVariable): LpVariable\llogical_or(model: LpProblem, dis: List[LpVariable]): LpVariable\lmaximum(model: LpProblem, xi: List[LpVariable], lower: int, upper: int): LpVariable\lminimum(model: LpProblem, xi: List[LpVariable], lower: int, upper: int): LpVariable\lproduct_binary_binary(model: LpProblem, decision_1: LpElement, decision_2: LpElement, decision_3: LpVariable): None\lproduct_binary_var(model: LpProblem, variable: LpElement, x: LpElement, target: LpVariable, lower: int, upper: int): None\l}", shape="record", style="solid"];
"src.items.fortress_cell.FortressCell" [color="black", fontcolor="black", label="{FortressCell|rules\ltags\l|add_constraint(solver: PulpSolver): None\lbookkeeping(): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lletter(): str\lsvg(): Optional[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.FortressCellGlyph" [color="black", fontcolor="black", label="{FortressCellGlyph|\l|}", shape="record", style="solid"];
"src.items.frame.Frame" [color="black", fontcolor="black", label="{Frame|rules\ltags\ltotal : int\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.frame_product.FrameProduct" [color="black", fontcolor="black", label="{FrameProduct|product : int\lrules\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.frozen_thermometer.FrozenThermometer" [color="black", fontcolor="black", label="{FrozenThermometer|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.FrozenThermometerGlyph" [color="black", fontcolor="black", label="{FrozenThermometerGlyph|\l|start_marker(): Optional[Marker]\l}", shape="record", style="solid"];
"src.utils.functions.Functions" [color="black", fontcolor="black", label="{Functions|\l|triangular(n: int): int\l}", shape="record", style="solid"];
"src.items.german_whisper.GermanWhisper" [color="black", fontcolor="black", label="{GermanWhisper|excluded : list\lrules\ltags\l|css(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.girandola.Girandola" [color="black", fontcolor="black", label="{Girandola|\l|coords(): List[Coord]\lcss(): Dict\lregion_name(): str\l}", shape="record", style="solid"];
"src.glyphs.glyph.Glyph" [color="black", fontcolor="black", label="{Glyph|class_name : str\lpriority\lused_classes\l|draw(): Optional[BaseElement]\lend_marker(): Optional[Marker]\lstart_marker(): Optional[Marker]\lsymbol(): Optional[Marker]\l}", shape="record", style="solid"];
"src.items.greater_than_equal_difference_line.GreaterThanEqualDifferenceLine" [color="black", fontcolor="black", label="{GreaterThanEqualDifferenceLine|rules\ltags\l|add_constraint(solver: PulpSolver): None\lget_regions(cell: Cell): Set\l}", shape="record", style="solid"];
"src.items.greater_than_equal_difference_pair.GreaterThanEqualDifferencePair" [color="black", fontcolor="black", label="{GreaterThanEqualDifferencePair|tags\l|add_constraint(solver: PulpSolver): None\l}", shape="record", style="solid"];
"src.items.greater_than_pair.GreaterThanPair" [color="black", fontcolor="black", label="{GreaterThanPair|rules\ltags\l|}", shape="record", style="solid"];
"src.commands.html_command.HTMLCommand" [color="black", fontcolor="black", label="{HTMLCommand|output\lsvg\l|process(): None\l}", shape="record", style="solid"];
"src.items.high_cell.HighCell" [color="black", fontcolor="black", label="{HighCell|rules\ltags\l|bookkeeping(): None\lcss(): Dict\ldigits(): List[int]\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lincluded(digit: int): bool\lletter(): str\lsvg(): Optional[Glyph]\l}", shape="record", style="solid"];
"src.commands.img_command.IMGCommand" [color="black", fontcolor="black", label="{IMGCommand|drawing : NoneType, Drawing\lfile_format\loutput_filename : str\lsvg\l|process(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.items.indexing.Indexer" [color="black", fontcolor="black", label="{Indexer|rules\ltags\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): int\lother_variant(): str\lvariant(): str\l}", shape="record", style="solid"];
"src.items.item.Item" [color="black", fontcolor="black", label="{Item|\l|}", shape="record", style="solid"];
"src.glyphs.glyph.KillerGlyph" [color="black", fontcolor="black", label="{KillerGlyph|cells\llong_lines : dict\llong_size : float\loffset : int\lshort_lines : dict\lsize : float\l|cell_long_lines(cell: Coord): VectorList\ldraw(): Optional[BaseElement]\llines(): VectorList\loutside(cell: Coord): bool\l}", shape="record", style="solid"];
"src.glyphs.glyph.KillerTextGlyph" [color="black", fontcolor="black", label="{KillerTextGlyph|angle\lposition\ltext : str\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.knight.Knight" [color="black", fontcolor="black", label="{Knight|digits : List[int]\lrules\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\loffsets(): List[Coord]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.known_cell.KnownCell" [color="black", fontcolor="black", label="{KnownCell|digit : int\lprefix : NoneType, str\l|bookkeeping(): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Tuple\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lletter(): str\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.KnownGlyph" [color="black", fontcolor="black", label="{KnownGlyph|location\lnumber : int\l|}", shape="record", style="solid"];
"src.items.knowns.Knowns" [color="black", fontcolor="black", label="{Knowns|rows : List[str]\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\lline_str(): List[str]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.KropkiGlyph" [color="black", fontcolor="black", label="{KropkiGlyph|first\lsecond\l|}", shape="record", style="solid"];
"src.items.kropki_pair.KropkiPair" [color="black", fontcolor="black", label="{KropkiPair|count\lfactor\lfactor_name\lrules\lsos : Dict[int, LpVariable], dict\ltags\l|add_constraint(solver: PulpSolver): None\ladd_implausible_constraint(solver: PulpSolver): None\ladd_impossible_constraint(solver: PulpSolver): None\ladd_unique_constraints(solver: PulpSolver): None\lcreate_sos(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector): List[Glyph]\lpossible(): set\lvalid(x: int, y: int): bool\l}", shape="record", style="solid"];
"src.items.kropki_pair2.KropkiPair2" [color="black", fontcolor="black", label="{KropkiPair2|\l|}", shape="record", style="solid"];
"src.commands.lp_command.LPCommand" [color="black", fontcolor="black", label="{LPCommand|solver : Optional[PulpSolver]\l|process(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.items.less_than_equal_difference_line.LessThanEqualDifferenceLine" [color="black", fontcolor="black", label="{LessThanEqualDifferenceLine|difference\lrules\ltags\l|}", shape="record", style="solid"];
"src.items.less_than_equal_difference_pair.LessThanEqualDifferencePair" [color="black", fontcolor="black", label="{LessThanEqualDifferencePair|tags\l|add_constraint(solver: PulpSolver): None\l}", shape="record", style="solid"];
"src.items.line.Line" [color="black", fontcolor="black", label="{Line|rules\ltags\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): List[Cell]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.LineGlyph" [color="black", fontcolor="black", label="{LineGlyph|end\lstart\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.glyphs.glyph.LittleArrowGlyph" [color="black", fontcolor="black", label="{LittleArrowGlyph|arrow : str\llocation : int\lposition\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.little_killer.LittleKiller" [color="black", fontcolor="black", label="{LittleKiller|cyclic\ldelta\ldirection\loffset : int\lreference\lrules\lside\ltags\ltotal : int\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Tuple[int, int, Cyclic, Side]\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.LittleKillerGlyph" [color="black", fontcolor="black", label="{LittleKillerGlyph|angle\larrow : str\lposition\lvalue : int\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.glyphs.glyph.LittleNumberGlyph" [color="black", fontcolor="black", label="{LittleNumberGlyph|number : int\lposition\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.lock_out.LockOut" [color="black", fontcolor="black", label="{LockOut|rules\ltags\l|}", shape="record", style="solid"];
"src.items.low_cell.LowCell" [color="black", fontcolor="black", label="{LowCell|rules\ltags\l|bookkeeping(): None\lcss(): Dict\ldigits(): List[int]\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lincluded(digit: int): bool\lletter(): str\lsvg(): Optional[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.LowCellGlyph" [color="black", fontcolor="black", label="{LowCellGlyph|coord\l|draw(): Optional[BaseElement]\lsymbol(): Optional[Symbol]\l}", shape="record", style="solid"];
"src.items.magic_square.MagicSquare" [color="black", fontcolor="black", label="{MagicSquare|center\lcenter_cell\lcorner\leven_cells : list\llines : list\lodd_cells : list\lrules\lstrict : bool\ltags\lunique : bool\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Tuple[Coord, Coord]\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.utils.matrix.Matrix" [color="black", fontcolor="black", label="{Matrix|a : int\lb : int\lc : int\ld : int\lname : str\l|compose(other: 'Matrix'): 'Matrix'\ltransform(other: Coord): Coord\l}", shape="record", style="solid"];
"src.utils.matrix.MatrixException" [color="black", fontcolor="red", label="{MatrixException|\l|}", shape="record", style="solid"];
"src.items.max_arrow.MaxArrow" [color="black", fontcolor="black", label="{MaxArrow|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.mid_cell.MidCell" [color="black", fontcolor="black", label="{MidCell|rules\ltags\l|bookkeeping(): None\lcss(): Dict\ldigits(): List[int]\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lincluded(digit: int): bool\lletter(): str\lsvg(): Optional[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.MidCellGlyph" [color="black", fontcolor="black", label="{MidCellGlyph|percentage : float\lposition\lsize\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.utils.minmax.MinMax" [color="black", fontcolor="black", label="{MinMax|name\l|}", shape="record", style="solid"];
"src.items.min_max_difference.MinMaxDifference" [color="black", fontcolor="black", label="{MinMaxDifference|rules\ltags\ltotal : int\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.min_max_sum.MinMaxSum" [color="black", fontcolor="black", label="{MinMaxSum|rules\ltags\ltotal : int\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.mountain.Mountain" [color="black", fontcolor="black", label="{Mountain|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.multiplication.Multiplication" [color="black", fontcolor="black", label="{Multiplication|\l|add_constraint(board: Board, solver: PulpSolver, cells: List[Cell], product: int, name: str): None\lget_set(board: Board, n: int): Set[int]\l}", shape="record", style="solid"];
"src.items.numbered_room.NumberedRoom" [color="black", fontcolor="black", label="{NumberedRoom|digit : int\ldirection\lindex : int\lreference\lrules\lside\lstart_cell\lused_classes\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Tuple\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.odd_cell.OddCell" [color="black", fontcolor="black", label="{OddCell|rules\ltags\l|bookkeeping(): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lincluded(digit: int): bool\lletter(): str\lsvg(): Optional[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.OddCellGlyph" [color="black", fontcolor="black", label="{OddCellGlyph|coord\l|draw(): Optional[BaseElement]\lsymbol(): Optional[Symbol]\l}", shape="record", style="solid"];
"src.utils.order.Order" [color="black", fontcolor="black", label="{Order|name\l|create(letter: str): 'Order'\lvalid(letter: str): bool\lvalues(): str\l}", shape="record", style="solid"];
"src.utils.order.OrderException" [color="black", fontcolor="red", label="{OrderException|\l|}", shape="record", style="solid"];
"src.items.orthogonal_product.OrthogonalProduct" [color="black", fontcolor="black", label="{OrthogonalProduct|rules\l|css(): Dict\lget_cells(): List[Cell]\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.orthogonally_adjacent.OrthogonallyAdjacent" [color="black", fontcolor="black", label="{OrthogonallyAdjacent|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.outside.Outside" [color="black", fontcolor="black", label="{Outside|digits : List[int]\lrules\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.pair.Pair" [color="black", fontcolor="black", label="{Pair|cell_1\lcell_2\llabel\lrules\ltags\lused_classes\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Tuple\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.palindrome.Palindrome" [color="black", fontcolor="black", label="{Palindrome|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.pencil_mark.PencilMarkCell" [color="black", fontcolor="black", label="{PencilMarkCell|digits : List[int]\lrules\ltags\l|bookkeeping(): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Tuple\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lsvg(): Optional[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.utils.point.Point" [color="black", fontcolor="black", label="{Point|coordinates\lmagnitude\ltransform\lx : float\ly : float\l|}", shape="record", style="solid"];
"src.glyphs.glyph.PolyLineGlyph" [color="black", fontcolor="black", label="{PolyLineGlyph|coords : List[Coord]\lend : bool\lstart : bool\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.commands.problem_png_command.ProblemPNGCommand" [color="black", fontcolor="black", label="{ProblemPNGCommand|svg\ltempfilename : str\l|process(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.items.product.Product" [color="black", fontcolor="black", label="{Product|position\lproduct : int\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\lget_cells(): List[Cell]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.product_pair.ProductPair" [color="black", fontcolor="black", label="{ProductPair|ratio : int\lrules\ltags\l|add_constraint(solver: PulpSolver): None\lbookkeeping(): None\lcss(): Dict\lglyphs(selector): List[Glyph]\lpossible(): List[int]\lvalid(x: int, y: int): bool\l}", shape="record", style="solid"];
"src.solvers.pulp_solver.PulpSolver" [color="black", fontcolor="black", label="{PulpSolver|answer : Optional[Answer]\lapplication\lapplication_name : str\lchoices : dict\llogname\lmodel : LpProblem\lname : str\lobjective : tuple\lsolver_name : str\lstatus : str\lvalues : dict\l|get_log_details(): Dict\lsave(filename: str): None\lsolve(): None\l}", shape="record", style="solid"];
"src.items.quadro.Quadro" [color="black", fontcolor="black", label="{Quadro|rules\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\l}", shape="record", style="solid"];
"src.items.quadruple.Quadruple" [color="black", fontcolor="black", label="{Quadruple|digits : str\lnumbers : str\lposition\lrules\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.QuadrupleGlyph" [color="black", fontcolor="black", label="{QuadrupleGlyph|numbers : str\lposition\lpriority\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.glyphs.glyph.RectGlyph" [color="black", fontcolor="black", label="{RectGlyph|position\lsize\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.glyphs.glyph.RectangleGlyph" [color="black", fontcolor="black", label="{RectangleGlyph|first\lpercentage : float\lratio : float\lsecond\lvertical : bool\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.region.Region" [color="black", fontcolor="black", label="{Region|cells\l|add_allowed_constraint(solver: PulpSolver, cells: List[Cell], allowed: List[int])\ladd_contains_constraint(solver: PulpSolver, digits: List[int])\ladd_sequence_constraint(solver: PulpSolver, order: Order)\ladd_total_constraint(solver: PulpSolver, total: int): None\ladd_unique_constraint(solver: PulpSolver, optional: bool)\lcreate(board: Board, yaml: Dict): Item\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.region_sets.RegionSet" [color="black", fontcolor="black", label="{RegionSet|\l|}", shape="record", style="solid"];
"src.items.renban.Renban" [color="black", fontcolor="black", label="{Renban|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lmandatory_digits(length: int): Set[int]\l}", shape="record", style="solid"];
"src.items.rossini.Rossini" [color="black", fontcolor="black", label="{Rossini|direction\lorder\lrules\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Any\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.row.Row" [color="black", fontcolor="black", label="{Row|rules\lstrict : bool\ltags\lunique : bool\l|add_constraint(solver: PulpSolver): None\l}", shape="record", style="solid"];
"src.items.row_indexer.RowIndexer" [color="black", fontcolor="black", label="{RowIndexer|tags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lother_variant(): str\lvariant(): str\l}", shape="record", style="solid"];
"src.items.rows.Rows" [color="black", fontcolor="black", label="{Rows|\l|create(board: Board, yaml: Dict): Item\l}", shape="record", style="solid"];
"src.utils.rule.Rule" [color="black", fontcolor="black", label="{Rule|html\lname : str\lrank : int\ltext : Optional[str]\l|}", shape="record", style="solid"];
"src.utils.rule.RuleException" [color="black", fontcolor="red", label="{RuleException|\l|}", shape="record", style="solid"];
"src.commands.pencil_mark_command.SVGCommand" [color="black", fontcolor="black", label="{SVGCommand|output : str\l|filter(item: Item): bool\lprocess(): None\l}", shape="record", style="solid"];
"src.commands.svg_command.SVGCommand" [color="black", fontcolor="black", label="{SVGCommand|output : str\l|process(): None\lselect(item: Item): bool\l}", shape="record", style="solid"];
"src.items.sandwich.Sandwich" [color="black", fontcolor="black", label="{Sandwich|index : int\lposition\lrules\lside\ltotal : int\lused_classes\l|add_constraint(solver: PulpSolver): None\ladd_constraint_column(solver: PulpSolver, include: Optional[re.Pattern], exclude: Optional[re.Pattern]): None\ladd_constraint_row(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Tuple\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.sequence.Sequence" [color="black", fontcolor="black", label="{Sequence|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lmax_diffence(length: int): int\lpossible_digits(): List[Set[int]]\l}", shape="record", style="solid"];
"src.utils.side.Side" [color="black", fontcolor="black", label="{Side|horizontal\lname\lvertical\l|create(letter: str): 'Side'\ldirection(cyclic: Cyclic): Direction\lmarker(board: Board, n: int): Coord\lorder_direction(order: Order): Direction\lorder_offset(): Coord\lstart(board: Board, cyclic: Cyclic, n: int): Coord\lstart_cell(board: Board, n: int): Coord\lvalid(letter: str): bool\lvalues(): str\l}", shape="record", style="solid"];
"src.utils.side.SideException" [color="black", fontcolor="red", label="{SideException|\l|}", shape="record", style="solid"];
"src.commands.simple_command.SimpleCommand" [color="black", fontcolor="black", label="{SimpleCommand|board : Optional[Board]\lconfig : Optional[Dict]\lconfig_filename : str\lname\loutput : str, Optional[str]\lproblem : Optional[Item]\lsolution : Optional[Solution]\l|create_board()\lcreate_problem()\lload_config(): None\lprocess(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.glyphs.glyph.SimpleTextGlyph" [color="black", fontcolor="black", label="{SimpleTextGlyph|\l|}", shape="record", style="solid"];
"src.items.simple_thermometer.SimpleThermometer" [color="black", fontcolor="black", label="{SimpleThermometer|rules\ltags\l|add_constraint(solver: PulpSolver): None\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.glyphs.glyph.SimpleThermometerGlyph" [color="black", fontcolor="black", label="{SimpleThermometerGlyph|\l|start_marker(): Optional[Marker]\l}", shape="record", style="solid"];
"src.items.solution.Solution" [color="black", fontcolor="black", label="{Solution|rows : List[str]\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): Any\lget_value(row: int, column: int): int\lline_str(): List[str]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.commands.solution_png_command.SolutionPNGCommand" [color="black", fontcolor="black", label="{SolutionPNGCommand|svg\ltempfilename : str\l|process(): None\lwrite(): None\l}", shape="record", style="solid"];
"src.commands.solve_command.SolveCommand" [color="black", fontcolor="black", label="{SolveCommand|output : str, Optional[str]\lsolution : NoneType, Optional[Solution]\lsolver : Optional[PulpSolver]\l|process(): None\l}", shape="record", style="solid"];
"src.solvers.solver.Solver" [color="black", fontcolor="black", label="{Solver|board\l|save(filename: str): None\lsolve(): None\l}", shape="record", style="solid"];
"src.items.special_region.SpecialRegion" [color="black", fontcolor="black", label="{SpecialRegion|rules\ltags\l|add_constraint(solver: PulpSolver): None\lcoords(): List[Coord]\lcreate(board: Board, yaml: Dict): Item\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lregion_name(): str\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.SquareGlyph" [color="black", fontcolor="black", label="{SquareGlyph|\l|}", shape="record", style="solid"];
"src.items.standard_diagonal.StandardDiagonal" [color="black", fontcolor="black", label="{StandardDiagonal|rules\ltags\l|add_constraint(solver: PulpSolver): None\l}", shape="record", style="solid"];
"src.items.standard_region.StandardRegion" [color="black", fontcolor="black", label="{StandardRegion|index : int\ltags\l|create(board: Board, yaml: Dict): Item\lextract(board: Board, yaml: Dict): int\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.region_sets.StandardRegionSet" [color="black", fontcolor="black", label="{StandardRegionSet|\l|to_dict(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.StarGlyph" [color="black", fontcolor="black", label="{StarGlyph|\l|}", shape="record", style="solid"];
"src.items.sum_pair.SumPair" [color="black", fontcolor="black", label="{SumPair|rules\ltags\ltotal\l|add_constraint(solver: PulpSolver): None\l}", shape="record", style="solid"];
"src.items.tlbr.TLBR" [color="black", fontcolor="black", label="{TLBR|\l|glyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.items.tlbr_refecting_diagonal.TLBRReflecting" [color="black", fontcolor="black", label="{TLBRReflecting|rules\l|add_constraint(solver: PulpSolver): None\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\l}", shape="record", style="solid"];
"src.utils.tag.Tag" [color="black", fontcolor="black", label="{Tag|name : str\l|}", shape="record", style="solid"];
"src.utils.tag.TagException" [color="black", fontcolor="red", label="{TagException|\l|}", shape="record", style="solid"];
"src.utils.tag_list.TagList" [color="black", fontcolor="black", label="{TagList|items : List[Tag]\ln : int\l|add(item: Tag): None\lsort(): None\l}", shape="record", style="solid"];
"src.utils.tag_list.TagListException" [color="black", fontcolor="red", label="{TagListException|\l|}", shape="record", style="solid"];
"src.glyphs.glyph.TextGlyph" [color="black", fontcolor="black", label="{TextGlyph|angle\lposition\ltext : str\l|draw(): Optional[BaseElement]\l}", shape="record", style="solid"];
"src.items.thermometer.Thermometer" [color="black", fontcolor="black", label="{Thermometer|tags\l|css(): Dict\l}", shape="record", style="solid"];
"src.glyphs.glyph.ThermometerGlyph" [color="black", fontcolor="black", label="{ThermometerGlyph|\l|start_marker(): Optional[Marker]\l}", shape="record", style="solid"];
"src.items.vi_pair.VIPair" [color="black", fontcolor="black", label="{VIPair|label\ltags\ltotal\l|css(): Dict\l}", shape="record", style="solid"];
"src.items.v_pair.VPair" [color="black", fontcolor="black", label="{VPair|label\ltags\ltotal\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\l}", shape="record", style="solid"];
"src.utils.vector.Vector" [color="black", fontcolor="black", label="{Vector|direction\lend\lstart\l|merge(other: 'Vector'): 'Vector'\lmergeable(other: 'Vector'): bool\l}", shape="record", style="solid"];
"src.utils.vector.VectorException" [color="black", fontcolor="red", label="{VectorException|\l|}", shape="record", style="solid"];
"src.utils.vector_list.VectorList" [color="black", fontcolor="black", label="{VectorList|coords\litems : List[Vector]\ln : int\l|find(coord: Coord): Optional[Coord]\lmerge_vectors(): 'VectorList'\lsort(): None\l}", shape="record", style="solid"];
"src.utils.vector_list.VectorListException" [color="black", fontcolor="red", label="{VectorListException|\l|}", shape="record", style="solid"];
"src.commands.verify_command.VerifyCommand" [color="black", fontcolor="black", label="{VerifyCommand|output : Optional[str], str\lsolution : NoneType, Optional[Solution]\lsolver : Optional[PulpSolver]\l|process(): None\l}", shape="record", style="solid"];
"src.items.window.Window" [color="black", fontcolor="black", label="{Window|center\loffsets : list\lrules\ltags\l|add_constraint(solver: PulpSolver): None\lcreate(board: Board, yaml: Dict): Item\lcss(): Dict\lextract(board: Board, yaml: Dict): Coord\lglyphs(selector: Callable[[Item], bool]): List[Glyph]\lto_dict(): Dict\l}", shape="record", style="solid"];
"src.items.xi_pair.XIPair" [color="black", fontcolor="black", label="{XIPair|label\ltags\ltotal\l|css(): Dict\l}", shape="record", style="solid"];
"src.items.x_pair.XPair" [color="black", fontcolor="black", label="{XPair|label\ltags\ltotal\l|add_constraint(solver: PulpSolver): None\lcss(): Dict\l}", shape="record", style="solid"];
"src.commands.answer_command.AnswerCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.bookkeeping_png_command.BookkeepingPNGCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.composed_command.ComposedCommand" -> "src.commands.command.Command" [arrowhead="empty", arrowtail="none"];
"src.commands.html_command.HTMLCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.img_command.IMGCommand" -> "src.commands.command.Command" [arrowhead="empty", arrowtail="none"];
"src.commands.lp_command.LPCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.pencil_mark_command.SVGCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.problem_png_command.ProblemPNGCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.simple_command.SimpleCommand" -> "src.commands.command.Command" [arrowhead="empty", arrowtail="none"];
"src.commands.solution_png_command.SolutionPNGCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.solve_command.SolveCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.svg_command.SVGCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.commands.verify_command.VerifyCommand" -> "src.commands.simple_command.SimpleCommand" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.ArrowGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.ArrowLineGlyph" -> "src.glyphs.glyph.PolyLineGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.BattenburgGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.BetweenGlyph" -> "src.glyphs.glyph.PolyLineGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.BoxGlyph" -> "src.glyphs.glyph.RectGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.CellGlyph" -> "src.glyphs.glyph.SquareGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.CircleGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.ComposedGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.Consecutive1Glyph" -> "src.glyphs.glyph.RectangleGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.ConsecutiveGlyph" -> "src.glyphs.glyph.CircleGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.EdgeTextGlyph" -> "src.glyphs.glyph.TextGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.EvenCellGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.FortressCellGlyph" -> "src.glyphs.glyph.SquareGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.FrozenThermometerGlyph" -> "src.glyphs.glyph.ThermometerGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.KillerGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.KillerTextGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.KnownGlyph" -> "src.glyphs.glyph.SimpleTextGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.KropkiGlyph" -> "src.glyphs.glyph.CircleGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.LineGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.LittleArrowGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.LittleKillerGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.LittleNumberGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.LowCellGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.MidCellGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.OddCellGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.PolyLineGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.QuadrupleGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.RectGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.RectangleGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.SimpleTextGlyph" -> "src.glyphs.glyph.TextGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.SimpleThermometerGlyph" -> "src.glyphs.glyph.ThermometerGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.SquareGlyph" -> "src.glyphs.glyph.RectGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.StarGlyph" -> "src.glyphs.glyph.SimpleTextGlyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.TextGlyph" -> "src.glyphs.glyph.Glyph" [arrowhead="empty", arrowtail="none"];
"src.glyphs.glyph.ThermometerGlyph" -> "src.glyphs.glyph.PolyLineGlyph" [arrowhead="empty", arrowtail="none"];
"src.items.anti.Anti" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.anti_bltr.AntiBLTR" -> "src.items.anti_diagonal.AntiDiagonal" [arrowhead="empty", arrowtail="none"];
"src.items.anti_diagonal.AntiDiagonal" -> "src.items.diagonals.Diagonal" [arrowhead="empty", arrowtail="none"];
"src.items.anti_king.AntiKing" -> "src.items.anti.Anti" [arrowhead="empty", arrowtail="none"];
"src.items.anti_knight.AntiKnight" -> "src.items.anti.Anti" [arrowhead="empty", arrowtail="none"];
"src.items.anti_monkey.AntiMonkey" -> "src.items.anti.Anti" [arrowhead="empty", arrowtail="none"];
"src.items.anti_queen.AntiQueen" -> "src.items.anti.Anti" [arrowhead="empty", arrowtail="none"];
"src.items.anti_tlbr.AntiTLBR" -> "src.items.anti_diagonal.AntiDiagonal" [arrowhead="empty", arrowtail="none"];
"src.items.arrow.Arrow" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.asterix.Asterix" -> "src.items.special_region.SpecialRegion" [arrowhead="empty", arrowtail="none"];
"src.items.battenburg.Battenburg" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.between.Between" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.bltr.BLTR" -> "src.items.standard_diagonal.StandardDiagonal" [arrowhead="empty", arrowtail="none"];
"src.items.box.Box" -> "src.items.standard_region.StandardRegion" [arrowhead="empty", arrowtail="none"];
"src.items.boxes.Boxes" -> "src.items.region_sets.StandardRegionSet" [arrowhead="empty", arrowtail="none"];
"src.items.cell.Cell" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.cell_reference.CellReference" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.center_product.CenterProduct" -> "src.items.product.Product" [arrowhead="empty", arrowtail="none"];
"src.items.column.Column" -> "src.items.standard_region.StandardRegion" [arrowhead="empty", arrowtail="none"];
"src.items.column_indexer.ColumnIndexer" -> "src.items.indexing.Indexer" [arrowhead="empty", arrowtail="none"];
"src.items.columns.Columns" -> "src.items.region_sets.StandardRegionSet" [arrowhead="empty", arrowtail="none"];
"src.items.composed_item.ComposedItem" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.consecutive_pair.ConsecutivePair" -> "src.items.less_than_equal_difference_pair.LessThanEqualDifferencePair" [arrowhead="empty", arrowtail="none"];
"src.items.constraints.Constraints" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.diagonals.Diagonal" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.difference_line.DifferenceLine" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.difference_pair.DifferencePair" -> "src.items.pair.Pair" [arrowhead="empty", arrowtail="none"];
"src.items.different_pair.DifferentPair" -> "src.items.pair.Pair" [arrowhead="empty", arrowtail="none"];
"src.items.disjoint_group.DisjointGroup" -> "src.items.standard_region.StandardRegion" [arrowhead="empty", arrowtail="none"];
"src.items.disjoint_groups.DisjointGroups" -> "src.items.region_sets.StandardRegionSet" [arrowhead="empty", arrowtail="none"];
"src.items.distinct_renban.DistinctRenban" -> "src.items.renban.Renban" [arrowhead="empty", arrowtail="none"];
"src.items.dutch_whisper.DutchWhisper" -> "src.items.greater_than_equal_difference_line.GreaterThanEqualDifferenceLine" [arrowhead="empty", arrowtail="none"];
"src.items.entropic.Entropic" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.equal_sum.EqualSum" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.even_cell.EvenCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.exclusion.Exclusion" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.first_n.FirstN" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.fortress_cell.FortressCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.frame.Frame" -> "src.items.first_n.FirstN" [arrowhead="empty", arrowtail="none"];
"src.items.frame_product.FrameProduct" -> "src.items.first_n.FirstN" [arrowhead="empty", arrowtail="none"];
"src.items.frozen_thermometer.FrozenThermometer" -> "src.items.thermometer.Thermometer" [arrowhead="empty", arrowtail="none"];
"src.items.german_whisper.GermanWhisper" -> "src.items.greater_than_equal_difference_line.GreaterThanEqualDifferenceLine" [arrowhead="empty", arrowtail="none"];
"src.items.girandola.Girandola" -> "src.items.special_region.SpecialRegion" [arrowhead="empty", arrowtail="none"];
"src.items.greater_than_equal_difference_line.GreaterThanEqualDifferenceLine" -> "src.items.difference_line.DifferenceLine" [arrowhead="empty", arrowtail="none"];
"src.items.greater_than_equal_difference_pair.GreaterThanEqualDifferencePair" -> "src.items.difference_pair.DifferencePair" [arrowhead="empty", arrowtail="none"];
"src.items.greater_than_pair.GreaterThanPair" -> "src.items.pair.Pair" [arrowhead="empty", arrowtail="none"];
"src.items.high_cell.HighCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.indexing.Indexer" -> "src.items.standard_region.StandardRegion" [arrowhead="empty", arrowtail="none"];
"src.items.knight.Knight" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.known_cell.KnownCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.knowns.Knowns" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.kropki_pair.KropkiPair" -> "src.items.pair.Pair" [arrowhead="empty", arrowtail="none"];
"src.items.kropki_pair2.KropkiPair2" -> "src.items.product_pair.ProductPair" [arrowhead="empty", arrowtail="none"];
"src.items.less_than_equal_difference_line.LessThanEqualDifferenceLine" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.less_than_equal_difference_pair.LessThanEqualDifferencePair" -> "src.items.difference_pair.DifferencePair" [arrowhead="empty", arrowtail="none"];
"src.items.line.Line" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.little_killer.LittleKiller" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.lock_out.LockOut" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.low_cell.LowCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.magic_square.MagicSquare" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.max_arrow.MaxArrow" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.mid_cell.MidCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.min_max_difference.MinMaxDifference" -> "src.items.first_n.FirstN" [arrowhead="empty", arrowtail="none"];
"src.items.min_max_sum.MinMaxSum" -> "src.items.first_n.FirstN" [arrowhead="empty", arrowtail="none"];
"src.items.mountain.Mountain" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.numbered_room.NumberedRoom" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.odd_cell.OddCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.orthogonal_product.OrthogonalProduct" -> "src.items.product.Product" [arrowhead="empty", arrowtail="none"];
"src.items.orthogonally_adjacent.OrthogonallyAdjacent" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.outside.Outside" -> "src.items.first_n.FirstN" [arrowhead="empty", arrowtail="none"];
"src.items.pair.Pair" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.palindrome.Palindrome" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.pencil_mark.PencilMarkCell" -> "src.items.cell_reference.CellReference" [arrowhead="empty", arrowtail="none"];
"src.items.product.Product" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.product_pair.ProductPair" -> "src.items.pair.Pair" [arrowhead="empty", arrowtail="none"];
"src.items.quadro.Quadro" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.quadruple.Quadruple" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.region.Region" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.region_sets.RegionSet" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.region_sets.StandardRegionSet" -> "src.items.region_sets.RegionSet" [arrowhead="empty", arrowtail="none"];
"src.items.renban.Renban" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.rossini.Rossini" -> "src.items.first_n.FirstN" [arrowhead="empty", arrowtail="none"];
"src.items.row.Row" -> "src.items.standard_region.StandardRegion" [arrowhead="empty", arrowtail="none"];
"src.items.row_indexer.RowIndexer" -> "src.items.indexing.Indexer" [arrowhead="empty", arrowtail="none"];
"src.items.rows.Rows" -> "src.items.region_sets.StandardRegionSet" [arrowhead="empty", arrowtail="none"];
"src.items.sandwich.Sandwich" -> "src.items.item.Item" [arrowhead="empty", arrowtail="none"];
"src.items.sequence.Sequence" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.simple_thermometer.SimpleThermometer" -> "src.items.thermometer.Thermometer" [arrowhead="empty", arrowtail="none"];
"src.items.solution.Solution" -> "src.items.composed_item.ComposedItem" [arrowhead="empty", arrowtail="none"];
"src.items.special_region.SpecialRegion" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.standard_diagonal.StandardDiagonal" -> "src.items.diagonals.Diagonal" [arrowhead="empty", arrowtail="none"];
"src.items.standard_region.StandardRegion" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.sum_pair.SumPair" -> "src.items.pair.Pair" [arrowhead="empty", arrowtail="none"];
"src.items.thermometer.Thermometer" -> "src.items.line.Line" [arrowhead="empty", arrowtail="none"];
"src.items.tlbr.TLBR" -> "src.items.standard_diagonal.StandardDiagonal" [arrowhead="empty", arrowtail="none"];
"src.items.tlbr_refecting_diagonal.TLBRReflecting" -> "src.items.diagonals.Diagonal" [arrowhead="empty", arrowtail="none"];
"src.items.v_pair.VPair" -> "src.items.sum_pair.SumPair" [arrowhead="empty", arrowtail="none"];
"src.items.vi_pair.VIPair" -> "src.items.sum_pair.SumPair" [arrowhead="empty", arrowtail="none"];
"src.items.window.Window" -> "src.items.region.Region" [arrowhead="empty", arrowtail="none"];
"src.items.x_pair.XPair" -> "src.items.sum_pair.SumPair" [arrowhead="empty", arrowtail="none"];
"src.items.xi_pair.XIPair" -> "src.items.sum_pair.SumPair" [arrowhead="empty", arrowtail="none"];
"src.solvers.pulp_solver.PulpSolver" -> "src.solvers.solver.Solver" [arrowhead="empty", arrowtail="none"];
"src.commands.svg_command.SVGCommand" -> "src.commands.bookkeeping_png_command.BookkeepingPNGCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="svg", style="solid"];
"src.commands.svg_command.SVGCommand" -> "src.commands.html_command.HTMLCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="svg", style="solid"];
"src.commands.svg_command.SVGCommand" -> "src.commands.img_command.IMGCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="svg", style="solid"];
"src.commands.svg_command.SVGCommand" -> "src.commands.problem_png_command.ProblemPNGCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="svg", style="solid"];
"src.commands.svg_command.SVGCommand" -> "src.commands.solution_png_command.SolutionPNGCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="svg", style="solid"];
"src.items.board.Board" -> "src.commands.simple_command.SimpleCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="board", style="solid"];
"src.items.board.Board" -> "src.solvers.answer.Answer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="board", style="solid"];
"src.items.board.Board" -> "src.solvers.solver.Solver" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="board", style="solid"];
"src.items.book_keeping.BookKeeping" -> "src.items.cell.Cell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="book", style="solid"];
"src.items.cell.Cell" -> "src.items.cell_reference.CellReference" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cell", style="solid"];
"src.items.cell.Cell" -> "src.items.pair.Pair" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cell_1", style="solid"];
"src.items.cell.Cell" -> "src.items.pair.Pair" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cell_2", style="solid"];
"src.solvers.answer.Answer" -> "src.commands.solve_command.SolveCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="solution", style="solid"];
"src.solvers.answer.Answer" -> "src.commands.verify_command.VerifyCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="solution", style="solid"];
"src.solvers.answer.Answer" -> "src.solvers.pulp_solver.PulpSolver" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="answer", style="solid"];
"src.solvers.pulp_solver.PulpSolver" -> "src.commands.lp_command.LPCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="solver", style="solid"];
"src.solvers.pulp_solver.PulpSolver" -> "src.commands.solve_command.SolveCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="solver", style="solid"];
"src.solvers.pulp_solver.PulpSolver" -> "src.commands.verify_command.VerifyCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="solver", style="solid"];
"src.utils.angle.Angle" -> "src.glyphs.glyph.ArrowGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="angle", style="solid"];
"src.utils.angle.Angle" -> "src.glyphs.glyph.KillerTextGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="angle", style="solid"];
"src.utils.angle.Angle" -> "src.glyphs.glyph.LittleKillerGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="angle", style="solid"];
"src.utils.angle.Angle" -> "src.glyphs.glyph.TextGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="angle", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.ArrowGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.BattenburgGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coord", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.CircleGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="center", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.ConsecutiveGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="first", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.ConsecutiveGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="second", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.EdgeTextGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="first", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.EdgeTextGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="second", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.EvenCellGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.EvenCellGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="size", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.KillerTextGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.KnownGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.KropkiGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="first", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.KropkiGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="second", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.LineGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="start", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.LineGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="end", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.LittleArrowGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.LittleKillerGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.LittleNumberGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.LowCellGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coord", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.MidCellGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.MidCellGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="size", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.OddCellGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="coord", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.QuadrupleGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.RectGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.RectGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="size", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.RectangleGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="first", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.RectangleGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="second", style="solid"];
"src.utils.coord.Coord" -> "src.glyphs.glyph.TextGlyph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.items.battenburg.Battenburg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.items.box.Box" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.items.exclusion.Exclusion" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.items.magic_square.MagicSquare" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="center", style="solid"];
"src.utils.coord.Coord" -> "src.items.magic_square.MagicSquare" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="corner", style="solid"];
"src.utils.coord.Coord" -> "src.items.product.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.items.quadruple.Quadruple" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="position", style="solid"];
"src.utils.coord.Coord" -> "src.items.window.Window" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="center", style="solid"];
"src.utils.coord.Coord" -> "src.utils.vector.Vector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="start", style="solid"];
"src.utils.coord.Coord" -> "src.utils.vector.Vector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="end", style="solid"];
"src.utils.cyclic.Cyclic" -> "src.items.little_killer.LittleKiller" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cyclic", style="solid"];
"src.utils.order.Order" -> "src.items.rossini.Rossini" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="order", style="solid"];
"src.utils.side.Side" -> "src.items.first_n.FirstN" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="side", style="solid"];
"src.utils.side.Side" -> "src.items.little_killer.LittleKiller" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="side", style="solid"];
"src.utils.side.Side" -> "src.items.numbered_room.NumberedRoom" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="side", style="solid"];
"src.utils.side.Side" -> "src.items.sandwich.Sandwich" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="side", style="solid"];
}
