"""TestAnti."""
import unittest
from typing import Type, List

from src.items.anti import Anti
from src.items.cell import Cell
from src.items.composed_item import ComposedItem
from src.items.item import Item
from tests.items.test_composed import TestComposed


class TestAnti(TestComposed):
    """Test suite for the Anti class."""

    def setUp(self) -> None:
        """Set up the test environment for Anti.

        Initializes the board and Anti item with a list of digits.
        """
        super().setUp()
        Cell.make_board(self.board)
        self.item = Anti(self.board, [1, 2, 3, 4, 5, 6, 7, 8, 9])
        self.size = 0

    @property
    def clazz(self) -> Type[Anti]:
        """Get the class being tested.

        Returns:
            Type[Anti]: The Anti class.
        """
        return Anti

    def test_offsets(self):
        """Test the offsets method of Anti.

        Asserts that the length of the offsets list is 0.
        """
        self.assertEqual(0, len(self.item.offsets()))

    @property
    def config(self) -> str:
        """Get the configuration string for Anti.

        Returns:
            str: The configuration string for Anti.
        """
        return "Anti: 1, 2, 3, 4, 5, 6, 7, 8, 9"

    @property
    def representation(self) -> str:
        """Get the string representation of the Anti instance.

        Returns:
            str: The string representation of the Anti object.
        """
        return "Anti(Board(9, 9, 3, 3, None, None, None, None), [1, 2, 3, 4, 5, 6, 7, 8, 9])"

    @property
    def expected_classes(self) -> set[Type[Item]]:
        """Get the expected set of classes that Anti should inherit from.

        Returns:
            set[Type[Item]]: A set containing the expected classes.
        """
        return {Item, ComposedItem, Anti}

    @property
    def pair_output(self) -> List:
        """Get the expected pair output for the Anti instance.

        Returns:
            List: The expected output of pairs.
        """
        return []

    def test_pairs(self):
        """Test the pairs method of Anti.

        Iterates through the pairs generated by the Anti item and compares
        them with the expected pair output.
        """
        result = []
        for pair in self.item.pairs(Cell.make(self.board, 1, 1), self.item.digits):
            result.append([pair.cell_2.row, pair.cell_2.column])

        self.assertListEqual(sorted(self.pair_output), sorted(result))


if __name__ == '__main__':  # pragma: no cover
    unittest.main()
